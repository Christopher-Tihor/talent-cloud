# Copyright 2020 The Province of British Columbia
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  annotations:
    description: |-
      Patroni Postgresql database cluster, with persistent storage.
    iconClass: icon-postgresql
    openshift.io/display-name: Patroni Postgresql (Persistent)
    openshift.io/long-description: This template deploys a patroni postgresql HA
      cluster with persistent storage.
    tags: postgresql
  name: patroni-pgsql-persistent
labels:
  app: ${APP_NAME}
  phase: deploy
  app.kubernetes.io/instance: ${APP_NAME}
  app.kubernetes.io/component: database
  app.kubernetes.io/name: patroni
  app.kubernetes.io/managed-by: template
parameters:
  - name: APP_NAME
    description: |
      The name of the application for labelling all artifacts.
    displayName: Application Name
    value: ${APP_NAME}-patroni
  - name: REPLICAS
    description: |
      The number of StatefulSet replicas to use.
    displayName: REPLICAS
    value: "3"
  - name: CPU_REQUEST
    description: |
      Starting amount of CPU the container can use.
    displayName: CPU REQUEST
    value: "75m"
  - name: CPU_LIMIT
    description: Maximum amount of CPU the container can use.
    displayName: CPU Limit
    value: "150m"
  - name: MEMORY_REQUEST
    description: Starting amount of memory the container can use.
    displayName: Memory Request
    value: 128Mi
  - name: MEMORY_LIMIT
    description: Maximum amount of memory the container can use.
    displayName: Memory Limit
    value: 256Mi
  - name: IMAGE_STREAM_NAMESPACE
    description: |
      The OpenShift Namespace where the patroni and postgresql
      ImageStream resides.
    displayName: ImageStream Namespace
    value: bcgov-docker-local
  - name: IMAGE_NAME
    description: |
      The Patroni image stream name
    value: patroni-postgres
  - name: IMAGE_TAG
    description: |
      The image tag used to specify which image you would like deployed.
      Don't use `latest`.
    value: "2.0.1-12.4-latest"
  - name: PVC_SIZE
    description: The size of the persistent volume to create.
    displayName: Persistent Volume Size
    value: 700Mi
  - name: STORAGE_CLASS
    value: netapp-file-standard
  - name: IMAGE_REGISTRY
    value: image-registry.openshift-image-registry.svc:5000
    value: artifacts.developer.gov.bc.ca
objects:
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        app: ${APP_NAME}-patroni
        cluster-name: ${APP_NAME}-patroni
      name: ${APP_NAME}-patroni
    spec:
      ports:
        - port: 5432
          protocol: TCP
          targetPort: 5432
      selector:
        cluster-name: ${APP_NAME}-patroni
        role: master
        app.kubernetes.io/name: patroni
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      creationTimestamp: null
      generation: 3
      labels:
        app: ${APP_NAME}-patroni
        cluster-name: ${APP_NAME}-patroni
      name: ${APP_NAME}-patroni
    spec:
      podManagementPolicy: OrderedReady
      replicas: ${{REPLICAS}}
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          statefulset: ${APP_NAME}-patroni
      serviceName: ${APP_NAME}-patroni
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: ${APP_NAME}-patroni
            statefulset: ${APP_NAME}-patroni
            cluster-name: ${APP_NAME}-patroni
            app.kubernetes.io/name: patroni
        spec:
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: statefulset
                        operator: In
                        values:
                          - ${APP_NAME}-patroni
                  topologyKey: "kubernetes.io/hostname"
          containers:
            - env:
                #TODO: Remove POD_IP in favor of PATRONI_KUBERNETES_POD_IP
                - name: POD_IP
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: status.podIP
                #          - name: PATRONI_KUBERNETES_USE_ENDPOINTS
                #            value: 'true'
                #          - name: PATRONI_KUBERNETES_POD_IP
                #            valueFrom:
                #              fieldRef:
                #                apiVersion: v1
                #                fieldPath: status.podIP
                #          - name: PATRONI_KUBERNETES_PORTS
                #            value: '{[{"name": "postgresql", "port": 5432}]}'
                - name: PATRONI_KUBERNETES_NAMESPACE
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
                - name: PATRONI_KUBERNETES_LABELS
                  value: '{"cluster-name": "${APP_NAME}-patroni", "app.kubernetes.io/name": "patroni"}'
                - name: PATRONI_SUPERUSER_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: superuser-username
                      name: ${APP_NAME}-patroni-creds
                - name: PATRONI_SUPERUSER_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: superuser-password
                      name: ${APP_NAME}-patroni-creds
                - name: PATRONI_REPLICATION_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: replication-username
                      name: ${APP_NAME}-patroni-creds
                - name: PATRONI_REPLICATION_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: replication-password
                      name: ${APP_NAME}-patroni-creds
                - name: APP_USER
                  valueFrom:
                    secretKeyRef:
                      key: app-db-username
                      name: ${APP_NAME}-patroni-creds
                - name: APP_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: app-db-password
                      name: ${APP_NAME}-patroni-creds
                - name: APP_DATABASE
                  valueFrom:
                    secretKeyRef:
                      key: app-db-name
                      name: ${APP_NAME}-patroni-creds
                - name: PATRONI_SCOPE
                  value: ${APP_NAME}-patroni
                - name: PATRONI_NAME
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.name
                - name: PATRONI_LOG_LEVEL
                  value: WARNING
                - name: PATRONI_POSTGRESQL_DATA_DIR
                  value: /home/postgres/pgdata/pgroot/data
                - name: PATRONI_POSTGRESQL_PGPASS
                  value: /tmp/pgpass
                - name: PATRONI_POSTGRESQL_LISTEN
                  value: 0.0.0.0:5432
                - name: PATRONI_RESTAPI_LISTEN
                  value: 0.0.0.0:8008
              image: ${IMAGE_REGISTRY}/${IMAGE_STREAM_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG}
              # Because we are using image reference to a tag, we need to always
              # pull the image otherwise we end up with outdated/out-of-sync
              # image depending on the node where it is running
              imagePullPolicy: Always
              name: postgresql
              ports:
                - containerPort: 8008
                  protocol: TCP
                - containerPort: 5432
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              readinessProbe:
                initialDelaySeconds: 5
                timeoutSeconds: 5
                failureThreshold: 4
                exec:
                  command:
                    - /usr/share/scripts/patroni/health_check.sh
              volumeMounts:
                - mountPath: /home/postgres/pgdata
                  name: postgresql
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          serviceAccountName: ${APP_NAME}-patroni
          terminationGracePeriodSeconds: 0
      updateStrategy:
        type: RollingUpdate
      volumeClaimTemplates:
        - metadata:
            annotations:
              volume.beta.kubernetes.io/storage-class: ${STORAGE_CLASS}
            labels:
              app: ${APP_NAME}-patroni
            name: postgresql
          spec:
            storageClassName: ${STORAGE_CLASS}
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: ${PVC_SIZE}